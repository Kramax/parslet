INTRODUCTION

A small experiment on PEG grammars. PEG means Parsing Expression Grammars [1].
These are a different kind of grammars that recognize almost the same
languages as your conventional LR parser, except that they are easier to work
with, since they haven't been conceived for generation, but for recognition of
languages. You can read the founding paper of the field by Bryan Ford here
[2].

Other Ruby projects that work on the same topic are: 
http://wiki.github.com/luikore/rsec/
http://github.com/nathansobo/treetop

My goal here is to see how a parser/parser generator should be constructed to
allow clean AST construction and good error handling. It seems to me that most
often, parser generators only handle the success-case and forget about
debugging and error generation.

[1] http://en.wikipedia.org/wiki/Parsing_expression_grammar
[2] http://pdos.csail.mit.edu/~baford/packrat/popl04/peg-popl04.pdf

SYNOPSIS

  require 'parslet'
  include Parslet

  # Constructs a parser using a Parser Expression Grammar like DSL: 
  parser =  str('"') >> 
            (
              (str('\\') >> any) /
              (str('"').absnt? >> any)
            ).repeat.as(:string) >> 
            str('"')
    
  # Parse the string and capture parts of the interpretation (:string above)        
  tree = parser.parse(%Q{
    "This is a \\"String\\" in which you can escape stuff"
  }.strip)

  tree # => {:string=>"This is a \\\"String\\\" in which you can escape stuff"}

  # Here's how you can grab results from that tree: 
  Pattern.new(:string => simple(:x)).each_match(tree) do |dictionary|
    puts "String contents: #{dictionary[:x]}"
  end
  
  # Here's how to transform that tree into something else --------------------

  # Defines the classes of our new Syntax Tree
  class StringLiteral < Struct.new(:text); end

  # Defines a set of transformation rules on tree leafes
  transform = Transform.new
  transform.rule(:string => simple(:x)) { |d| StringLiteral.new(d[:x]) }

  # Transforms the tree
  transform.apply(tree) 

  # => #<struct StringLiteral text="This is a \\\"String\\\" ... escape stuff">

STATUS 

This is in a usable alpha state, although I've only just begun working on the
above goals. Maybe I will incorporate this into rooc
(http://github.com/kschiess/rooc) one day.

(c) 2010 Kaspar Schiess