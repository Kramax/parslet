# Autogenerated from a Treetop grammar. Edits may be lost.


module Literals
  include Treetop::Runtime

  def root
    @root || :document
  end

  module Document0
    def literals
      elements[1]
    end
  end

  def _nt_document
    start_index = index
    if node_cache[:document].has_key?(index)
      cached = node_cache[:document][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_literals
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Document0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:document][start_index] = r0

    r0
  end

  module Literals0
    def literal
      elements[0]
    end

    def eol
      elements[1]
    end
  end

  module Literals1
    def literal
      elements[0]
    end

    def eol
      elements[1]
    end

  end

  def _nt_literals
    start_index = index
    if node_cache[:literals].has_key?(index)
      cached = node_cache[:literals][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_literal
    s1 << r2
    if r2
      r3 = _nt_eol
      s1 << r3
      if r3
        s4, i4 = [], index
        loop do
          i5, s5 = index, []
          r6 = _nt_literal
          s5 << r6
          if r6
            r7 = _nt_eol
            s5 << r7
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Literals0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Literals1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r8 = _nt_eol
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:literals][start_index] = r0

    r0
  end

  module Literal0
  end

  def _nt_literal
    start_index = index
    if node_cache[:literal].has_key?(index)
      cached = node_cache[:literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_string_literal
    if r2
      r1 = r2
    else
      r3 = _nt_int_literal
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r5 = _nt_space
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Literal0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:literal][start_index] = r0

    r0
  end

  module StringLiteral0
  end

  module StringLiteral1
  end

  module StringLiteral2
  end

  def _nt_string_literal
    start_index = index
    if node_cache[:string_literal].has_key?(index)
      cached = node_cache[:string_literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        if has_terminal?("\\", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\\")
          r5 = nil
        end
        s4 << r5
        if r5
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(StringLiteral0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          i7, s7 = index, []
          i8 = index
          if has_terminal?('\G["]', true, index)
            r9 = true
            @index += 1
          else
            r9 = nil
          end
          if r9
            r8 = nil
          else
            @index = i8
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s7 << r8
          if r8
            if index < input_length
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r10 = nil
            end
            s7 << r10
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(StringLiteral1)
          else
            @index = i7
            r7 = nil
          end
          if r7
            r3 = r7
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r11 = nil
        end
        s0 << r11
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StringLiteral2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string_literal][start_index] = r0

    r0
  end

  def _nt_int_literal
    start_index = index
    if node_cache[:int_literal].has_key?(index)
      cached = node_cache[:int_literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:int_literal][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_eol
    start_index = index
    if node_cache[:eol].has_key?(index)
      cached = node_cache[:eol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_line_end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:eol][start_index] = r0

    r0
  end

  module LineEnd0
    def crlf
      elements[0]
    end

  end

  module LineEnd1
  end

  module LineEnd2
    def crlf
      elements[2]
    end

  end

  def _nt_line_end
    start_index = index
    if node_cache[:line_end].has_key?(index)
      cached = node_cache[:line_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_crlf
    s1 << r2
    if r2
      r4 = _nt_space
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(LineEnd0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5, s5 = index, []
      if has_terminal?('//', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('//')
        r6 = nil
      end
      s5 << r6
      if r6
        s7, i7 = [], index
        loop do
          i8, s8 = index, []
          i9 = index
          r10 = _nt_crlf
          if r10
            r9 = nil
          else
            @index = i9
            r9 = instantiate_node(SyntaxNode,input, index...index)
          end
          s8 << r9
          if r9
            if index < input_length
              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r11 = nil
            end
            s8 << r11
          end
          if s8.last
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            r8.extend(LineEnd1)
          else
            @index = i8
            r8 = nil
          end
          if r8
            s7 << r8
          else
            break
          end
        end
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        s5 << r7
        if r7
          r12 = _nt_crlf
          s5 << r12
          if r12
            r14 = _nt_space
            if r14
              r13 = r14
            else
              r13 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r13
          end
        end
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(LineEnd2)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:line_end][start_index] = r0

    r0
  end

  def _nt_crlf
    start_index = index
    if node_cache[:crlf].has_key?(index)
      cached = node_cache[:crlf][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[\\r\\n]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:crlf][start_index] = r0

    r0
  end

end

class LiteralsParser < Treetop::Runtime::CompiledParser
  include Literals
end
