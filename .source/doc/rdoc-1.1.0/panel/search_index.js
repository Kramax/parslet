var search_data = {"index":{"searchIndex":["parslet","atoms","alternative","base","cause","fail","success","context","entity","lookahead","named","re","repetition","sequence","str","classmethods","errortree","expression","treetop","parsefailed","parser","visitors","citrus","treetop","pattern","source","rangesearch","transform",">>()","absnt?()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","alternative()","alternative()","any()","apply()","as()","ascii_tree()","cache()","call_on_match()","cause()","element_match()","element_match_hash()","entity()","eof?()","error?()","error?()","error_tree()","lbound()","line_and_column()","lookahead()","match()","match()","maybe()","named()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nodes()","parse()","parse()","parse_with_debug()","parslet()","pos()","pos=()","prsnt?()","re()","read()","repeat()","repetition()","repetition()","root()","rule()","rule()","rule()","sequence()","sequence()","simple()","str()","str()","subtree()","to_citrus()","to_parslet()","to_s()","to_s()","to_treetop()","transform()","try()","|()","readme","parslet.rb","atoms.rb","alternative.rb","base.rb","context.rb","entity.rb","lookahead.rb","named.rb","re.rb","repetition.rb","sequence.rb","str.rb","visitor.rb","convenience.rb","error_tree.rb","export.rb","expression.rb","treetop.rb","parser.rb","pattern.rb","binding.rb","context.rb","rspec.rb","source.rb","transform.rb"],"longSearchIndex":["lib/parslet.rb","parslet","parslet::atoms","parslet::atoms","parslet::atoms::base","parslet::atoms::base","parslet::atoms::base","parslet::atoms","parslet::atoms","parslet::atoms","parslet::atoms","parslet::atoms","parslet::atoms","parslet::atoms","parslet::atoms","parslet","parslet","parslet","parslet::expression","parslet","parslet","parslet::parser","parslet::parser::visitors","parslet::parser::visitors","parslet","parslet","parslet::source","parslet","parslet::atoms::base","parslet::atoms::base","parslet::atoms::alternative","parslet::atoms::base","parslet::atoms::entity","parslet::atoms::lookahead","parslet::atoms::named","parslet::atoms::re","parslet::atoms::repetition","parslet::atoms::sequence","parslet::atoms::str","parslet::parser::visitors::citrus","parslet::parser::visitors::treetop","parslet","parslet::transform","parslet::atoms::base","parslet::errortree","parslet::atoms::context","parslet::pattern","parslet::errortree","parslet::pattern","parslet::pattern","parslet::parser::visitors::citrus","parslet::source","parslet::atoms::base::fail","parslet::atoms::base::success","parslet::atoms::base","parslet::source::rangesearch","parslet::source","parslet::parser::visitors::citrus","parslet","parslet::pattern","parslet::atoms::base","parslet::parser::visitors::citrus","parslet::atoms::alternative","parslet::atoms::context","parslet::atoms::repetition","parslet::atoms::sequence","parslet::atoms::str","parslet::expression","parslet::parser::visitors::citrus","parslet::pattern","parslet::source","parslet::errortree","parslet::atoms::base","parslet::expression","parslet::parser","parslet::atoms::entity","parslet::source","parslet::source","parslet::atoms::base","parslet::parser::visitors::citrus","parslet::source","parslet::atoms::base","parslet::parser::visitors::citrus","parslet::parser::visitors::treetop","parslet::classmethods","parslet::classmethods","parslet::transform","parslet::transform","parslet","parslet::parser::visitors::citrus","parslet","parslet","parslet::parser::visitors::citrus","parslet","parslet::parser","parslet::expression","parslet::atoms::base::cause","parslet::errortree","parslet::parser","parslet::expression","parslet::atoms::base","parslet::atoms::base","files/readme.html","files/lib/parslet_rb.html","files/lib/parslet/atoms_rb.html","files/lib/parslet/atoms/alternative_rb.html","files/lib/parslet/atoms/base_rb.html","files/lib/parslet/atoms/context_rb.html","files/lib/parslet/atoms/entity_rb.html","files/lib/parslet/atoms/lookahead_rb.html","files/lib/parslet/atoms/named_rb.html","files/lib/parslet/atoms/re_rb.html","files/lib/parslet/atoms/repetition_rb.html","files/lib/parslet/atoms/sequence_rb.html","files/lib/parslet/atoms/str_rb.html","files/lib/parslet/atoms/visitor_rb.html","files/lib/parslet/convenience_rb.html","files/lib/parslet/error_tree_rb.html","files/lib/parslet/export_rb.html","files/lib/parslet/expression_rb.html","files/lib/parslet/expression/treetop_rb.html","files/lib/parslet/parser_rb.html","files/lib/parslet/pattern_rb.html","files/lib/parslet/pattern/binding_rb.html","files/lib/parslet/pattern/context_rb.html","files/lib/parslet/rig/rspec_rb.html","files/lib/parslet/source_rb.html","files/lib/parslet/transform_rb.html"],"info":[["Parslet","lib/parslet.rb","classes/Parslet.html"," < ","A simple parser generator library. Typical usage would look like this:  require 'parslet' class MyParser",1],["Atoms","Parslet","classes/Parslet/Atoms.html"," < ","--- This is where parslets name comes from: Small parser atoms. ",1],["Alternative","Parslet::Atoms","classes/Parslet/Atoms/Alternative.html"," < Parslet::Atoms::Base","Alternative during matching. Contains a list of parslets that is tried each one in turn. Only fails if",1],["Base","Parslet::Atoms","classes/Parslet/Atoms/Base.html"," < Object","Base class for all parslets, handles orchestration of calls and implements a lot of the operator and",1],["Cause","Parslet::Atoms::Base","classes/Parslet/Atoms/Base/Cause.html"," < Struct.new(:message, :source, :pos)","",1],["Fail","Parslet::Atoms::Base","classes/Parslet/Atoms/Base/Fail.html"," < Struct.new(:message)","Internally, all parsing functions return either an instance of Fail  or an instance of Success.  ",1],["Success","Parslet::Atoms::Base","classes/Parslet/Atoms/Base/Success.html"," < Struct.new(:result)","Internally, all parsing functions return either an instance of Fail  or an instance of Success. ",1],["Context","Parslet::Atoms","classes/Parslet/Atoms/Context.html"," < Object","Helper class that implements a transient cache that maps position and parslet object to results. This",1],["Entity","Parslet::Atoms","classes/Parslet/Atoms/Entity.html"," < Parslet::Atoms::Base","This wraps pieces of parslet definition and gives them a name. The wrapped piece is lazily evaluated",1],["Lookahead","Parslet::Atoms","classes/Parslet/Atoms/Lookahead.html"," < Parslet::Atoms::Base","Either positive or negative lookahead, doesn't consume its input.  Example:  str('foo').prsnt?   # matches",1],["Named","Parslet::Atoms","classes/Parslet/Atoms/Named.html"," < Parslet::Atoms::Base","Names a match to influence tree construction.  Example:  str('foo')            # will return 'foo', ",1],["Re","Parslet::Atoms","classes/Parslet/Atoms/Re.html"," < Parslet::Atoms::Base","Matches a special kind of regular expression that only ever matches one character at a time. Useful members",1],["Repetition","Parslet::Atoms","classes/Parslet/Atoms/Repetition.html"," < Parslet::Atoms::Base","Matches a parslet repeatedly.  Example:  str('a').repeat(1,3)  # matches 'a' at least once, but at most",1],["Sequence","Parslet::Atoms","classes/Parslet/Atoms/Sequence.html"," < Parslet::Atoms::Base","A sequence of parslets, matched from left to right. Denoted by '>>' Example:  str('a') >> str('b')  #",1],["Str","Parslet::Atoms","classes/Parslet/Atoms/Str.html"," < Parslet::Atoms::Base","Matches a string of characters.  Example:  str('foo') # matches 'foo' ",1],["ClassMethods","Parslet","classes/Parslet/ClassMethods.html"," < ","",1],["ErrorTree","Parslet","classes/Parslet/ErrorTree.html"," < Object","A tree structure that contains parse error messages. This can be used to give the user a detailed report",1],["Expression","Parslet","classes/Parslet/Expression.html"," < Object","Allows specifying rules as strings using the exact same grammar that treetop does, minus the actions.",1],["Treetop","Parslet::Expression","classes/Parslet/Expression/Treetop.html"," < Object","",1],["ParseFailed","Parslet","classes/Parslet/ParseFailed.html"," < StandardError","Raised when the parse failed to match or to consume all its input. It contains the message that should",1],["Parser","Parslet","classes/Parslet/Parser.html"," < Object","The base class for all your parsers. Use as follows:  require 'parslet' class MyParser < Parslet::Parser",1],["Visitors","Parslet::Parser","classes/Parslet/Parser/Visitors.html"," < ","",1],["Citrus","Parslet::Parser::Visitors","classes/Parslet/Parser/Visitors/Citrus.html"," < Object","",1],["Treetop","Parslet::Parser::Visitors","classes/Parslet/Parser/Visitors/Treetop.html"," < Citrus","",1],["Pattern","Parslet","classes/Parslet/Pattern.html"," < Object","Matches trees against expressions. Trees are formed by arrays and hashes for expressing membership and",1],["Source","Parslet","classes/Parslet/Source.html"," < Object","Wraps the input IO to parslet. The interface defined by this class is  smaller than what IO offers, but",1],["RangeSearch","Parslet::Source","classes/Parslet/Source/RangeSearch.html"," < ","Mixin for arrays that implicitly give a number of ranges, where one range begins where the other one",1],["Transform","Parslet","classes/Parslet/Transform.html"," < Object","Transforms an expression tree into something else. The transformation performs a depth-first, post-order",1],[">>","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000015","(parslet)","Chains two parslet atoms together as a sequence.  Example:  str('a') >> str('b') ",2],["absnt?","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000018","()","Tests for absence of a parslet atom in the input stream without consuming it.  Example:  # Only proceed",2],["accept","Parslet::Atoms::Alternative","classes/Parslet/Atoms/Alternative.html#M000074","(visitor)","Call back visitors #alternative method. See parslet/export for an example.  ",2],["accept","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000068","(visitor)","",2],["accept","Parslet::Atoms::Entity","classes/Parslet/Atoms/Entity.html#M000070","(visitor)","Call back visitors #entity method. See parslet/export for an example.  ",2],["accept","Parslet::Atoms::Lookahead","classes/Parslet/Atoms/Lookahead.html#M000075","(visitor)","Call back visitors #lookahead method. See parslet/export for an example.  ",2],["accept","Parslet::Atoms::Named","classes/Parslet/Atoms/Named.html#M000071","(visitor)","Call back visitors #named method. See parslet/export for an example.  ",2],["accept","Parslet::Atoms::Re","classes/Parslet/Atoms/Re.html#M000076","(visitor)","Call back visitors #re method. See parslet/export for an example.  ",2],["accept","Parslet::Atoms::Repetition","classes/Parslet/Atoms/Repetition.html#M000073","(visitor)","Call back visitors #repetition method. See parslet/export for an example.  ",2],["accept","Parslet::Atoms::Sequence","classes/Parslet/Atoms/Sequence.html#M000072","(visitor)","Call back visitors #sequence method. See parslet/export for an example.  ",2],["accept","Parslet::Atoms::Str","classes/Parslet/Atoms/Str.html#M000069","(visitor)","Call back visitors #str method. See parslet/export for an example.  ",2],["alternative","Parslet::Parser::Visitors::Citrus","classes/Parslet/Parser/Visitors/Citrus.html#M000092","(alternatives)","",2],["alternative","Parslet::Parser::Visitors::Treetop","classes/Parslet/Parser/Visitors/Treetop.html#M000095","(alternatives)","",2],["any","Parslet","classes/Parslet.html#M000131","()","Returns an atom matching any character. It acts like the '.' (dot) character in regular expressions.",2],["apply","Parslet::Transform","classes/Parslet/Transform.html#M000121","(obj)","Applies the transformation to a tree that is generated by Parslet::Parser or a simple parslet. Transformation",2],["as","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000025","(name)","Marks a parslet atom as important for the tree output. This must be used  to achieve meaningful output",2],["ascii_tree","Parslet::ErrorTree","classes/Parslet/ErrorTree.html#M000086","()","Returns an ascii tree representation of the causes of this node and its children.  ",2],["cache","Parslet::Atoms::Context","classes/Parslet/Atoms/Context.html#M000013","(obj, source, &block)","Caches a parse answer for obj at source.pos. Applying the same parslet at one position of input always",2],["call_on_match","Parslet::Pattern","classes/Parslet/Pattern.html#M000104","(bindings, block)","Executes the block on the bindings obtained by #match, if such a match can be made. Contains the logic",2],["cause","Parslet::ErrorTree","classes/Parslet/ErrorTree.html#M000080","()","",2],["element_match","Parslet::Pattern","classes/Parslet/Pattern.html#M000105","(tree, exp, bindings)","Returns true if the tree element given by +tree+ matches the expression given by +exp+. This match must",2],["element_match_hash","Parslet::Pattern","classes/Parslet/Pattern.html#M000114","(tree, exp, bindings)","",2],["entity","Parslet::Parser::Visitors::Citrus","classes/Parslet/Parser/Visitors/Citrus.html#M000084","(name, ctx, block)","",2],["eof?","Parslet::Source","classes/Parslet/Source.html#M000110","()","",2],["error?","Parslet::Atoms::Base::Fail","classes/Parslet/Atoms/Base/Fail.html#M000001","()","",2],["error?","Parslet::Atoms::Base::Success","classes/Parslet/Atoms/Base/Success.html#M000002","()","",2],["error_tree","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000037","()","Error tree returns what went wrong here plus what went wrong inside  subexpressions as a tree. The error",2],["lbound","Parslet::Source::RangeSearch","classes/Parslet/Source/RangeSearch.html#M000115","(bound)","Scans the array for the first number that is > than bound. Returns the  index of that number.  ",2],["line_and_column","Parslet::Source","classes/Parslet/Source.html#M000113","(position=nil)","",2],["lookahead","Parslet::Parser::Visitors::Citrus","classes/Parslet/Parser/Visitors/Citrus.html#M000093","(positive, bound_parslet)","",2],["match","Parslet","classes/Parslet.html#M000129","(str=nil)","Returns an atom matching a character class. All regular expressions can be used, as long as they match",2],["match","Parslet::Pattern","classes/Parslet/Pattern.html#M000103","(subtree)","Decides if the given subtree matches this pattern. Returns the bindings made on a successful match or",2],["maybe","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000011","()","Returns a new parslet atom that is only maybe present in the input. This is synonymous to calling #repeat(0,1).",2],["named","Parslet::Parser::Visitors::Citrus","classes/Parslet/Parser/Visitors/Citrus.html#M000085","(name, parslet)","",2],["new","Parslet::Atoms::Alternative","classes/Parslet/Atoms/Alternative.html#M000000","(*alternatives)","Constructs an Alternative instance using all given parslets in the order given. This is what happens",2],["new","Parslet::Atoms::Context","classes/Parslet/Atoms/Context.html#M000012","()","",2],["new","Parslet::Atoms::Repetition","classes/Parslet/Atoms/Repetition.html#M000054","(parslet, min, max, tag=:repetition)","",2],["new","Parslet::Atoms::Sequence","classes/Parslet/Atoms/Sequence.html#M000060","(*parslets)","",2],["new","Parslet::Atoms::Str","classes/Parslet/Atoms/Str.html#M000065","(str)","",2],["new","Parslet::Expression","classes/Parslet/Expression.html#M000098","(str, opts={}, context=self)","Creates a parslet from a foreign language expression.  Example:  Parslet::Expression.new(\"'a' 'b'\") ",2],["new","Parslet::Parser::Visitors::Citrus","classes/Parslet/Parser/Visitors/Citrus.html#M000081","(context)","",2],["new","Parslet::Pattern","classes/Parslet/Pattern.html#M000102","(pattern)","",2],["new","Parslet::Source","classes/Parslet/Source.html#M000107","(io)","",2],["nodes","Parslet::ErrorTree","classes/Parslet/ErrorTree.html#M000079","()","",2],["parse","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000003","(io)","Given a string or an IO object, this will attempt a parse of its contents and return a result. If the",2],["parse","Parslet::Expression","classes/Parslet/Expression.html#M000100","(str)","Parses the string and returns a parse tree. ",2],["parse_with_debug","Parslet::Parser","classes/Parslet/Parser.html#M000077","(str)","Packages the common idiom begin tree = parser.parse('something') rescue Parslet::ParseFailed => error",2],["parslet","Parslet::Atoms::Entity","classes/Parslet/Atoms/Entity.html#M000021","()","",2],["pos","Parslet::Source","classes/Parslet/Source.html#M000111","()","",2],["pos=","Parslet::Source","classes/Parslet/Source.html#M000112","(new_pos)","NOTE: If you seek beyond the point that you last read, you will get  undefined behaviour. This is by",2],["prsnt?","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000024","()","Tests for presence of a parslet atom in the input stream without consuming it.  Example:  # Only proceed",2],["re","Parslet::Parser::Visitors::Citrus","classes/Parslet/Parser/Visitors/Citrus.html#M000083","(match)","",2],["read","Parslet::Source","classes/Parslet/Source.html#M000108","(n)","",2],["repeat","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000010","(min=0, max=nil)","Construct a new atom that repeats the current atom min times at least and at most max times. max can",2],["repetition","Parslet::Parser::Visitors::Citrus","classes/Parslet/Parser/Visitors/Citrus.html#M000091","(min, max, parslet)","",2],["repetition","Parslet::Parser::Visitors::Treetop","classes/Parslet/Parser/Visitors/Treetop.html#M000094","(min, max, parslet)","",2],["root","Parslet::ClassMethods","classes/Parslet/ClassMethods.html#M000127","(name)","Define the parsers #root function. This is the place where you start  parsing; if you have a rule for",2],["rule","Parslet::ClassMethods","classes/Parslet/ClassMethods.html#M000128","(name, &definition)","Define an entity for the parser. This generates a method of the same name that can be used as part of",2],["rule","Parslet::Transform","classes/Parslet/Transform.html#M000117","(expression, &block)","Define a rule for the transform subclass.  ",2],["rule","Parslet::Transform","classes/Parslet/Transform.html#M000120","(expression, &block)","Defines a rule to be applied whenever apply is called on a tree. A rule is composed of two parts:  *",2],["sequence","Parslet","classes/Parslet.html#M000133","(symbol)","Returns a placeholder for a tree transformation that will only match a  sequence of elements. The +symbol+",2],["sequence","Parslet::Parser::Visitors::Citrus","classes/Parslet/Parser/Visitors/Citrus.html#M000090","(parslets)","",2],["simple","Parslet","classes/Parslet.html#M000134","(symbol)","Returns a placeholder for a tree transformation that will only match  simple elements. This matches everything",2],["str","Parslet","classes/Parslet.html#M000130","(str)","Returns an atom matching the +str+ given.  Example:  str('class')      # will match 'class'  ",2],["str","Parslet::Parser::Visitors::Citrus","classes/Parslet/Parser/Visitors/Citrus.html#M000082","(str)","",2],["subtree","Parslet","classes/Parslet.html#M000135","(symbol)","Returns a placeholder for tree transformation patterns that will match  any kind of subtree.  Example:",2],["to_citrus","Parslet::Parser","classes/Parslet/Parser.html#M000096","()","Exports the current parser instance as a string in the Citrus dialect.  Example:  require 'parslet/export'",2],["to_parslet","Parslet::Expression","classes/Parslet/Expression.html#M000101","()","Turns this expression into a parslet. ",2],["to_s","Parslet::Atoms::Base::Cause","classes/Parslet/Atoms/Base/Cause.html#M000044","()","",2],["to_s","Parslet::ErrorTree","classes/Parslet/ErrorTree.html#M000087","()","Alias for #ascii_tree",2],["to_treetop","Parslet::Parser","classes/Parslet/Parser.html#M000097","()","Exports the current parser instance as a string in the Treetop dialect.  Example:  require 'parslet/export'",2],["transform","Parslet::Expression","classes/Parslet/Expression.html#M000099","(tree)","Transforms the parse tree into a parslet expression.  ",2],["try","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000007","(source, context)","Override this in your Atoms::Base subclasses to implement parsing behaviour.  ",2],["|","Parslet::Atoms::Base","classes/Parslet/Atoms/Base.html#M000016","(parslet)","Chains two parslet atoms together to express alternation. A match will always be attempted with the parslet",2],["README","files/README.html","files/README.html","","INTRODUCTION  Parslet makes developing complex parsers easy. It does so by  * providing the best <b>error",3],["parslet.rb","files/lib/parslet_rb.html","files/lib/parslet_rb.html","","A simple parser generator library. Typical usage would look like this:  require 'parslet' class MyParser",3],["atoms.rb","files/lib/parslet/atoms_rb.html","files/lib/parslet/atoms_rb.html","","This is where parslets name comes from: Small parser atoms. ",3],["alternative.rb","files/lib/parslet/atoms/alternative_rb.html","files/lib/parslet/atoms/alternative_rb.html","","Alternative during matching. Contains a list of parslets that is tried each one in turn. Only fails if",3],["base.rb","files/lib/parslet/atoms/base_rb.html","files/lib/parslet/atoms/base_rb.html","","Base class for all parslets, handles orchestration of calls and implements a lot of the operator and",3],["context.rb","files/lib/parslet/atoms/context_rb.html","files/lib/parslet/atoms/context_rb.html","","",3],["entity.rb","files/lib/parslet/atoms/entity_rb.html","files/lib/parslet/atoms/entity_rb.html","","This wraps pieces of parslet definition and gives them a name. The wrapped piece is lazily evaluated",3],["lookahead.rb","files/lib/parslet/atoms/lookahead_rb.html","files/lib/parslet/atoms/lookahead_rb.html","","Either positive or negative lookahead, doesn't consume its input.  Example:  str('foo').prsnt?   # matches",3],["named.rb","files/lib/parslet/atoms/named_rb.html","files/lib/parslet/atoms/named_rb.html","","Names a match to influence tree construction.  Example:  str('foo')            # will return 'foo', ",3],["re.rb","files/lib/parslet/atoms/re_rb.html","files/lib/parslet/atoms/re_rb.html","","Matches a special kind of regular expression that only ever matches one character at a time. Useful members",3],["repetition.rb","files/lib/parslet/atoms/repetition_rb.html","files/lib/parslet/atoms/repetition_rb.html","","Matches a parslet repeatedly.  Example:  str('a').repeat(1,3)  # matches 'a' at least once, but at most",3],["sequence.rb","files/lib/parslet/atoms/sequence_rb.html","files/lib/parslet/atoms/sequence_rb.html","","A sequence of parslets, matched from left to right. Denoted by '>>' Example:  str('a') >> str('b')  #",3],["str.rb","files/lib/parslet/atoms/str_rb.html","files/lib/parslet/atoms/str_rb.html","","Matches a string of characters.  Example:  str('foo') # matches 'foo' ",3],["visitor.rb","files/lib/parslet/atoms/visitor_rb.html","files/lib/parslet/atoms/visitor_rb.html","","Augments all parslet atoms with an accept method that will call back  to the visitor given. ",3],["convenience.rb","files/lib/parslet/convenience_rb.html","files/lib/parslet/convenience_rb.html","","",3],["error_tree.rb","files/lib/parslet/error_tree_rb.html","files/lib/parslet/error_tree_rb.html","","A tree structure that contains parse error messages. This can be used to give the user a detailed report",3],["export.rb","files/lib/parslet/export_rb.html","files/lib/parslet/export_rb.html","","Allows exporting parslet grammars to other lingos.  ",3],["expression.rb","files/lib/parslet/expression_rb.html","files/lib/parslet/expression_rb.html","","Allows specifying rules as strings using the exact same grammar that treetop does, minus the actions.",3],["treetop.rb","files/lib/parslet/expression/treetop_rb.html","files/lib/parslet/expression/treetop_rb.html","","",3],["parser.rb","files/lib/parslet/parser_rb.html","files/lib/parslet/parser_rb.html","","The base class for all your parsers. Use as follows:  require 'parslet' class MyParser < Parslet::Parser",3],["pattern.rb","files/lib/parslet/pattern_rb.html","files/lib/parslet/pattern_rb.html","","Matches trees against expressions. Trees are formed by arrays and hashes for expressing membership and",3],["binding.rb","files/lib/parslet/pattern/binding_rb.html","files/lib/parslet/pattern/binding_rb.html","","Used internally for representing a bind placeholder in a Parslet::Transform pattern. This is the superclass",3],["context.rb","files/lib/parslet/pattern/context_rb.html","files/lib/parslet/pattern/context_rb.html","","",3],["rspec.rb","files/lib/parslet/rig/rspec_rb.html","files/lib/parslet/rig/rspec_rb.html","","",3],["source.rb","files/lib/parslet/source_rb.html","files/lib/parslet/source_rb.html","","",3],["transform.rb","files/lib/parslet/transform_rb.html","files/lib/parslet/transform_rb.html","","",3]]}}